#!/usr/bin/env perl
use strict;
use warnings;
use DBD::SQLite;
use DBI;
use Getopt::Long;
use Carp;
use 5.014;

## Global Variables
my $sql_database_file;
my $sql_tablename;
my $action;

sub parse_command_line();
sub show_help;
sub check_database_table;
sub list_database_tables;
sub showsql;
sub show_fields;

##
## Program Start
##
parse_command_line();

if ( $action eq "list" ) {
	list_database_tables($sql_database_file);
}
if ( $action eq "showsql" ) {
	showsql($sql_database_file,$sql_tablename);
}
if ( $action eq "showfields" ) {
	show_fields($sql_database_file,$sql_tablename);
}

##
## Program End
##

sub parse_command_line()
{
	my $rc = GetOptions(
			"help" => \&show_help,
			)
		or die "Error in command-line arguments\n";

	$action = shift @ARGV
		or die "error: missing action. See --help for details.\n";
	die "error: unknown action ($action). See --help for details.\n"
		unless $action ~~ [qw/list showsql showfields/];


	# These action need a DBFILE parameter
	if ( $action ~~ [qw/list showsql showfields/] ) {
		$sql_database_file = shift @ARGV
			or die "error: missing SQLite datbase filename (1st parameter)\n";
	}

	# These action need a TABLENAME parameter
	if ( $action ~~ [qw/showsql showfields/] ) {
		$sql_tablename = shift @ARGV
			or die "error: missing TABLENAME parameter. See --help for details.\n";
		die "error: invalid table name ($sql_tablename)\n"
			unless $sql_tablename =~ /^\w+$/;
	}
}

sub check_database_table
{
	my ($file,$table) = @_;
	croak "Missing 'file' parameter" unless defined $file;
	croak "missing 'table' parameter" unless defined $table;

	die "error: sqlite database file ($file) doesn't exist\n"
		unless -e $file;

	my $dbh = DBI->connect("dbi:SQLite:dbname=$file","","")
		or die "Failed to load SQL database ($file): $DBI::errstr\n";

	my $sth = $dbh->prepare("SELECT count(*) from $table")
		or die "Failed to prepare SQL statement (database='$file'): $DBI::errstr\n";
}

sub showsql
{
	my ($file,$table) = @_;
	croak "Missing 'file' parameter" unless defined $file;
	croak "missing 'table' parameter" unless defined $table;

	check_database_table($file,$table);

	my $dbh = DBI->connect("dbi:SQLite:dbname=$file","","")
		or die "Failed to load SQL database ($file): $DBI::errstr\n";

	my $sth = $dbh->prepare("SELECT sql FROM sqlite_master WHERE type='table' and name='$table';")
		or die "Failed to prepare SQL statement (database='$file'): $DBI::errstr\n";
	$sth->execute();

	while (my ($sql) = $sth->fetchrow()) {
		print $sql, "\n";
	}

	$sth->finish();
	$dbh->disconnect();
}

sub show_fields
{
	my ($file,$table) = @_;
	croak "Missing 'file' parameter" unless defined $file;
	croak "missing 'table' parameter" unless defined $table;

	check_database_table($file,$table);

	my $dbh = DBI->connect("dbi:SQLite:dbname=$file","","")
		or die "Failed to load SQL database ($file): $DBI::errstr\n";

	my $sth = $dbh->prepare("PRAGMA table_info($table)")
		or die "Failed to prepare SQL statement (database='$file'): $DBI::errstr\n";
	$sth->execute();

	say join("\t",qw/NUMBER NAME TYPE NULL DEFAULT PK/);
	while (my ($num,$name,$type,$not_null,
		   $default,$primary_key) = $sth->fetchrow()) {
		say join("\t",$num,$name,$type,
				($not_null)?"NOT-NULL":"NULL",
				($default)?$default:"-",
				($primary_key)?"PK":"-");
	}


	$sth->finish();
	$dbh->disconnect();
}

sub list_database_tables
{
	my ($file) = @_;
	croak "Missing 'file' parameter" unless defined $file;

	die "error: sqlite database file ($file) doesn't exist\n"
		unless -e $file;

	my $dbh = DBI->connect("dbi:SQLite:dbname=$file","","")
		or die "Failed to load SQL database ($file): $DBI::errstr\n";

	my $sth = $dbh->prepare("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name asc;")
		or die "Failed to prepare SQL statement (database='$file'): $DBI::errstr\n";
	$sth->execute();

	while (my ($table) = $sth->fetchrow()) {
		print $table, "\n";
	}

	$sth->finish();
	$dbh->disconnect();

}

sub show_help
{
	print<<"EOF";
SQLite-to-CPP:
  Creates template CPP code from SQLite databases

Usage: sqlite_to_cpp [OPTIONS] ACTION [ACTION PARAMETERS]

Options:
  --help  - This help screen

ACTIONs:
  list [DBFILE]  -  List tables in database file DBFILE.
  showsql [DBFILE] [TABLE] - Show the original SQL CREATE TABLE
		     statement for the specified [TABLE],
		     as stored in the database (in the 'sqlite_master' table).
  showfields [DBFILE] [TABLE] - List the fields in table [TABLE].
                     Uses the "PRAGMA table_info()" SQLite command.
		     The output columns are:
		     1. Field number (zero-based)
		     2. Field name
		     3. Field type (TEXT/INTEGER,BLOB,etc)
		     4. NULL or NOT-NULL
		     5. Default Value
		     6. PK (if primary key) or '-' (if not).


EOF

	exit;
}
